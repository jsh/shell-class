# Let's start again

echo hello, world

# put it into a script
fc
chmod +x hello
./hello

# but wait. How's that work?
# understanding the answer unlocks a lot

# Operating systems = File Trees + Process Trees
# a digression
mkdir foo/dir{1,2}
touch foo/dir{1,2}/mumble{1,2,3}
tree

# Directories and files form a tree.
# So do processes. Watch this.
pstree

# And where is the "You Are Here" sign?
# signWe're running bash
echo $$
ps ajax
bash
echo $$
ps ajax

# The "$$" is the process-id (pid).
# Like $i and $RANDOM in the Lottery example, the leading '$' marks it as a variable.
# In this case, the system automatically gives it the value of the process ID.
# Every new process gets its own

# Let's do it again
bash
echo $$
ps ajax
pstree
exit
pstree
exit
pstree
exit # whoops!

# How's this useful?
echo hello
# The shell reads this, and does what it says.
# I didn't say "Reads what you type." It's not that smart.
echo 'echo hello'
echo 'echo hello' | bash
echo $$
echo '$$'
echo 'echo $$'
echo 'echo $$' | bash
echo 'echo $$' | bash

# Notice that surrounding a variable in single quotes
# keeps the shell from expanding it.

# So what's a shell?
# An infinite loop that reads one line at a time, and "does" it.
# (You could write one.)
# Terminates on end-of-input.
bash
/bin/date
^D

# Does the shell do anything else?
# If it sees a variable, it sticks in the value
# That's part of what "Does" means.
i=3
echo $i
greeting='hello, world'
echo $greeting

# If it sees control flow, it figures it out
if true; echo hello, world; fi
if false; echo hello, world; fi

# If the first word is a program name, and it's executable, do it.
# Executable means bits set.
ls -l /bin/date

# If it's a program, where is it?

# Why is just naming it enough?
echo $PATH

# How does it know how to "do it"?
# Magic numbers
which bash
file $(which bash)

# If the magic numbers say it's a compiled program, create a new process and launch the compiled program.
# If the magic numbers say it's a shell script, create a new shell process, and feed it the script as input.

# What's the magic number? 0x23 0x21
file /usr/bin/*
file /usr/bin/* | grep script
file /usr/bin/* | grep script | head -1
file /usr/bin/* | grep script | head -1 | sed 's/:.*//'
od -xc $(file /usr/bin/* | grep script | head -1 | sed 's/:.*//')
od -xc $(file /usr/bin/* | grep script | head -1 | sed 's/:.*//') | head
grep script /etc/magic

# What else is in the shell?
man bash
man bash | wc -l

# The world's simplest shell
while read next_line; do eval $next_line; done
