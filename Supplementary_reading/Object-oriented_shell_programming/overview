Like C, the shell is a programming language. And, just as you can write programming languages in C, you can write them in the shell. Here's an example: http://www.usenix.org/publications/library/proceedings/bos94/full_papers/haemer.a

I just skimmed through the first part of the Usenix paper, and they seem to have removed all instances of the word "Posix" when they formatted it.  If you see something like " -.2" or " -conforming", read it as " Posix-.2" and "Posix-conforming."  I suspect this was text that originally had small caps, so things like "Unix" will also be gone.  

In other words, if it looks like there's a missing word, just make one up and stick it in.  :-) 

The code examples deliberately mimic C++ code examples in papers by other folks.

The back story on the paper is that I wrote it while working for a company that had been hired, by IBM, to implement a make replacement that they'd been sold on by some junior consultant. 

He'd called his system "make++", and convinced IBM it was "an object-oriented replacement for make."  We'd just gotten a spec and the engineers on the project were walking around shaking their heads.  Not only was the spec bad and incomplete, the design was unrelated to make, and the language was about as object-oriented as FORTRAN. 

Senior engineers on the project were pretty worked up about it.  I was more laissez faire -- our company needed the money -- but in one hallway conversation, I said, "I think I could do more object-oriented programming in the shell.  Wait.  Could I?"

