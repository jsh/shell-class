A friend of mine went to a job interview, and was asked to write a piece
of code that looked for instances of a word in a file.

He went to the whiteboard and wrote

grep -w word file

"Yeah, yeah," the interviewer said. "But not that. I'm looking to see
how you program."

My response would be, "That *is* how I program."

My language of first resort is the shell. My libraries and toolkits are
/bin and /usr/bin. My IDE is the command line.

"Oh, but I mean for real programming."

Who, if confronted with "find all instances of a word in a file" would
hire someone who didn't solve that with "grep -w word file"?

Another friend, hired to lead a test automation group, sent me a chunk
of Python he'd written to test a capability. I sent him back a shell
script, that did the same job, but was more capable and robust, adding,
"... but I realize the company wants all the tests in Python." It was
also only a third the size of his.

He said, "Of course we'll use your test instead. It's better."

Shell scripts are programs, plain and simple. Sometimes, the shell is
the best programming language for the job.

Ah, but when?

We'll explore what the shell does, what it does well, and perhaps help
open your minds a bit.
