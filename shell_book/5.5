What mechanisms have people used to cope with this limitation?

  The common solution is the one you explain: write the result to standard out.

  A second, which you don't mention, is sourcing the other script, which lets
  you share variables.  Instead of this

    anotherscript         # which doesn't work

  or this

    VAL=$(anotherscript)  # which does work, but is clumsy

  you can say this

    source anotherscript  # or . anotherscript

  [ ". anotherscript" is common, but I often use "source" because I know I
  overlook or accidentally delete a "." I guard against my personal, common
  mistakes. :-) ]

  Here's a third approach to the same problem, which happens to handle multiple
  values a little more cleanly than the multiple-read solution you offer.  This
  little shell module, raise.sh, implements a function raise(), analogous to
  export, that lets you "export" variables "upwards."

  When you use it, in lieu of this

    VAL=$(anotherscript)

  you do this

    eval $(anotherscript)


  # Pass values upwards for evaluation
  #
  # EXAMPLE:
  #
  #    $ cat example
  #    source raise.sh
  #
  #    raise foo bar    # mark variables to be "raised"
  #   
  #    foo=hello        # do stuff with them in the script
  #    bar=world
  #   
  #    $ eval $(example)  # now use the script
  #    $ echo $foo, $bar  # and see that they're available.
  #    hello, world


  raise() {
    trap "4eval $*" EXIT
  }

  4eval() {
    for i in $*
    do
      echo $i=${!i}
    done
  }
