  In addition to these points, I've seen a lot of scripts provide default
  values like this, without comment:

    : ${VAR:=value}

  This is in the same league as C's

      for (;*t++ = *s++;)
        ;

  It's truly cryptic, yet common enough to be worth walking the reader through.
  Here's an example:

    Colon (:) is a shell builtin guaranteed to do nothing -- a no-op.  Why
    would this ever be useful?

    Once apon a time, there was no way to put comments in shell scripts.
    ("When dinosaurs walked the earth, when men were men, yada, yada ...")

    But yes, really.

    In those days, the colon command gave programmers a hack-around: you could
    issue it as a command, and then put your comment in as the arguments to the
    command, which it would cheerfully ignore.  (It always returns success, so
    now it's a synonym for "true")

    Today, "# do nothing" and ": do nothing" have almost the same effect, but
    not quite.

    When the shell sees '#', it ignores the rest of the line.  When the shell
    sees ":", though, it's a command, so the shell also sees all the arguments.

    Like my girlfriend, it parses arguments, and then cheerfully throws them
    away.

    To illustrate, this comment line

      # ${VAR:=FOO}

    is ignored and discarded.

    But for this command
    
      : ${VAR:=FOO}

    the shell looks at $VAR to see if it's set.  If not, it assigns $VAR the
    string "FOO".  Then it passes the value of this argument into the command,
    which does ... nothing.

    This is a common idiom for providing fall-back values to bash variables.
    If we've hit this line and $VAR already had a value, it's unchanged.  If it
    didn't, now it does.
  

