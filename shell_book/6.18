  An RPN calculator!  Just what I need! :-)

  You can simplify this code a bit with one reasonable assumption: a single arg
  returns itself.  (The infix caculator in 6.19 does this.)

    $ rpncalc 12
    12

  This turns the initialization into this:

    ANS=$1; shift

  More important, it completely transforms the complex argument checking:

  if [ \( $# -lt 3 \) -o \( $(($# % 2 )) -eq 0 \) ]
  then
    -> if [ $# -eq 0 ] || [ $(($# % 2)) -eq 0 ]; then
    -> if (( $# % 2 == 0 )); then
    -> (( $# % 2 == 1 )) || ...

  so we get

  USAGE='usage: ${0##*/} number [number op ...]'
  (( $# % 2 == 1 )) || die $USAGE # needs an odd number of args.

  Oh, and unlike the usage message in the book, this error message now matches
  the name of the command.  The message in the book has "calc" hard-wired, and
  the name of the file is "rpncalc."
