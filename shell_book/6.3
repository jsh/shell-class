if [ -d "$DIRPLACE" ]
then
  cd $DIRPLACE
  if [ -e "$INFILE" ]
  then
    if [ -w "$OUTFILE" ]
    then
      doscience < "$INFILE" >> "$OUTFILE"
    else
      echo "can not write to $OUTFILE"
    fi
  else
    echo "can not read from $INFILE"
  fi
else
  echo "can not cd into $DIRPLACE"
fi

  Some old programming tricks can clean this up a bit.  (Oh, and "cannot" is
  one word.)

  First, putting the short clause first, in an if/then/else construct, helps
  keep you from missing it.  (I think Kernighan and Plauger's "Elements of
  Programming Style" gets credit for this.)

    if [ ! -d "$DIRPLACE" ]
    then
      echo "cannot cd into $DIRPLACE"
    else
      cd $DIRPLACE
      if [ ! -e "$INFILE" ]
        then
          echo "cannot read from $INFILE"
        else
          if [ -w "$OUTFILE" ]
          then
            doscience < "$INFILE" >> "$OUTFILE"
          else
            echo "cannot write to $OUTFILE"
          fi
        fi
      fi
    fi     

  Second, performing error processing as a virtual goto can get rid of much of
  the confusing nesting.  (Don Knuth's "Structured Programming with GOTOs" gets
  credit for this.)

    if [ ! -d "$DIRPLACE" ]
    then
      die "cannot cd into $DIRPLACE"
    fi
    cd $DIRPLACE
    if [ ! -e "$INFILE" ]
      die "cannot read from $INFILE"
    fi
    if [ ! -w "$OUTFILE" ]
    then
      die "cannot write to $OUTFILE"
    fi
    doscience < "$INFILE" >> "$OUTFILE"

  Then, shortcut evaluation makes this even easier to read

    [ -d "$DIRPLACE" ] || die "cannot cd into $DIRPLACE"
    cd $DIRPLACE
    [ -e "$INFILE" ] || die "cannot read from $INFILE"
    [ -w "$OUTFILE" ] || die "cannot write to $OUTFILE"
    doscience < "$INFILE" >> "$OUTFILE"

  As a side effect, now that it's finally easy to read, we can spot that we
  haven't said what we mean.  Let's fix that:

    cd ${DIRPLACE:?cannot cd into "$DIRPLACE"}
    [ -r "$INFILE" ] || die "cannot read from '$INFILE'"
    [ -w "$OUTFILE" ] || die "cannot write to '$OUTFILE'"
    doscience < "$INFILE" >> "$OUTFILE"

