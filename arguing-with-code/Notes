Next, let's get greedy and buy a lot of lottery tickets.

But what if we want the number we're picking to be an arg?

Let's explore argument parsing a little.

First, let's just look at the args, nothing else.  Here's a simple one.
Note how we print.

x=3
echo x is $x
unset x
echo x is $x
echo x is "$x"  # doesn't work
echo x is '$x'  # really doesn't work
echo "x is '$x'" # aha!


Pointless digression.

You can do some fancy stuff here.

foobar=69
p_foobar=foobar    # pointer-to-foobar
echo $p_foobar
echo ${p_foobar}   # pointless braces
echo ${!p_foobar}  # pointered braces

See printval.
Oh good. Pointers in C aren't confusing enough.

Good to know they're there, but is there a better way?
Sure. See setting.

setting 10
setting 1
bash -x setting

setting
bash -x setting
bash -ux setting

Note that this also protects you from tpyos.
Can also put it in the shebang line
use set -x/+x for finer-grained debugging

